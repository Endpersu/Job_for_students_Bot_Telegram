from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from User_menu import get_main_keyboard, get_back_keyboard, get_profile_keyboard
from userdatabase import Database
from loguru import logger


class Form(StatesGroup):
    first_name = State()
    second_name = State()
    age = State()
    job = State()
    photo = State()


def anketa(dp: Dispatcher):
    @dp.message(Command('start'))
    async def cmd_start(message: types.Message, state: FSMContext):
        await state.set_state(Form.first_name)
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –º–∏–Ω–∏-–∞–Ω–∫–µ—Ç—É")
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        db = Database()
        db.add_user(message.from_user.id, message.from_user.username)
        db.print_users()

    @dp.message(Form.first_name)
    async def process_first_name(message: types.Message, state: FSMContext):
        await state.update_data(first_name=message.text)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–≤–æ–µ –∏–º—è')
        await state.set_state(Form.second_name)
        await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}! –ö–∞–∫–∞—è —É –≤–∞—Å —Ñ–∞–º–∏–ª–∏—è?")

    @dp.message(Form.second_name)
    async def process_second_name(message: types.Message, state: FSMContext):
        if message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.")
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ñ–∞–º–∏–ª–∏—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return
        await state.update_data(second_name=message.text)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é')
        await state.set_state(Form.age)
        await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–∑—Ä–∞—Å—Ç?")

    @dp.message(Form.age)
    async def process_age(message: types.Message, state: FSMContext):
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
            return
        await state.update_data(age=message.text)
        await state.set_state(Form.job)
        await message.answer(f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {message.text}. –ö–∞–∫–∞—è –≤–∞—à–∞ –∂–µ–ª–∞–µ–º–∞—è —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ?")
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç')

    @dp.message(Form.job)
    async def process_job(message: types.Message, state: FSMContext):
        await state.update_data(job=message.text)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
        data = await state.get_data()
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É!\n"
            f"–ò–º—è: {data['first_name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {data['second_name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
            f"–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {data['job']}"
        )
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É')
        buttons = [
            [types.KeyboardButton(text="–î–∞‚úÖ"), types.KeyboardButton(text="–ù–µ—Ç‚ùå")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=buttons)
        await message.answer("–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?", reply_markup=keyboard)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ")

        @dp.message(lambda message: message.text in ["–î–∞‚úÖ", "–ù–µ—Ç‚ùå"])
        async def handle_button_click(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç‚ùå":
                await state.set_state(Form.first_name)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", reply_markup=ReplyKeyboardRemove())
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
                await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            elif message.text == "–î–∞‚úÖ":
                await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–Ω–∏-–∞–Ω–∫–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é")

        @dp.message(F.text == "–û –Ω–∞—Åüî¥")
        async def about_bot(message: types.Message):
            about_text = """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:

        –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø–æ–∏—Å–∫–µ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ.
        –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
        - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ
        - –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        - –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º"""
            await message.answer(
                about_text,
                reply_markup=get_back_keyboard()
            )
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –æ–ø—Ü–∏—é '–û –Ω–∞—Å'")

        @dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚¨ÖÔ∏è")
        async def back_to_menu(message: types.Message):
            await message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_keyboard()
                )

        @dp.message(F.text == "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—åüë§")
        async def show_profile(message: types.Message):
            if data:
                profile_text = f"""üìå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

        üë§ –ò–º—è: {data['first_name']}
        üìù –§–∞–º–∏–ª–∏—è: {data['second_name']}
        üî¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}
        üíº –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {data['job']}
        """
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –æ–ø—Ü–∏—é '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å'")
                await message.answer(
                    profile_text,
                    reply_markup=get_profile_keyboard()
                )
            else:
                await message.answer(
                    "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞.",
                    reply_markup=get_main_keyboard()
                )

        await state.clear()
